import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useWebApp } from '@vkruglikov/react-telegram-web-app';

const OnboardingPage = () => {
  const navigate = useNavigate();
  const webApp = useWebApp();
  const [currentStep, setCurrentStep] = useState(0);

  const onboardingSteps = [
    {
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WB Simple!',
      description: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫—É –Ω–∞ Wildberries —Å –Ω—É–ª—è –¥–æ 1.000.000 —Ä—É–±–ª–µ–π.',
      image: 'üöÄ'
    },
    {
      title: '–ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—É—á–µ–Ω–∏—è',
      description: '8 –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ–¥—É—Ç –≤–∞—Å –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Wildberries –¥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞.',
      image: 'üìö'
    },
    {
      title: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤',
      description: '–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤, —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.',
      image: 'üìã'
    },
    {
      title: '–ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ',
      description: '–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏.',
      image: 'üë•'
    }
  ];

  const handleNext = () => {
    if (currentStep < onboardingSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      navigate('/');
    }
  };

  const handleSkip = () => {
    navigate('/');
  };

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Telegram
  if (webApp?.MainButton) {
    webApp.MainButton.setText(currentStep < onboardingSteps.length - 1 ? '–î–∞–ª–µ–µ' : '–ù–∞—á–∞—Ç—å');
    webApp.MainButton.show();
    webApp.MainButton.onClick(handleNext);
  }

  const currentStepData = onboardingSteps[currentStep];

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4">
      <div className="w-full max-w-md">
        <div className="flex justify-end mb-4">
          <button 
            onClick={handleSkip} 
            className="text-primary font-medium"
          >
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
          </button>
        </div>
        
        <div className="flex justify-center mb-8 text-6xl">
          {currentStepData.image}
        </div>
        
        <h1 className="text-2xl font-bold text-center mb-4">
          {currentStepData.title}
        </h1>
        
        <p className="text-center text-gray-700 dark:text-gray-300 mb-8">
          {currentStepData.description}
        </p>
        
        <div className="flex justify-center space-x-2 mb-8">
          {onboardingSteps.map((_, index) => (
            <div 
              key={index} 
              className={`h-2 rounded-full ${
                index === currentStep ? 'w-8 bg-primary' : 'w-2 bg-gray-300 dark:bg-gray-700'
              }`}
            />
          ))}
        </div>
        
        <div className="flex justify-center">
          <button 
            onClick={handleNext} 
            className="tg-button w-full"
          >
            {currentStep < onboardingSteps.length - 1 ? '–î–∞–ª–µ–µ' : '–ù–∞—á–∞—Ç—å'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default OnboardingPage; 