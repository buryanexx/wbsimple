import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useWebApp } from '@vkruglikov/react-telegram-web-app';
import Card from '../components/Card';
import Button from '../components/Button';
import { useAuth } from '../hooks/useAuth';
import { subscriptionsAPI } from '../services/api';
import { useSubscription } from '../hooks/useSubscription';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
interface SubscriptionPlan {
  id: string;
  name: string;
  price: number;
  period: string;
  description: string;
}

const SubscriptionPage = () => {
  const navigate = useNavigate();
  const webApp = useWebApp();
  const { user } = useAuth();
  const { subscription, getFormattedEndDate, getDaysRemaining } = useSubscription();
  
  const [isLoading, setIsLoading] = useState(true);
  const [plans, setPlans] = useState<SubscriptionPlan[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
  const [isPendingPayment, setIsPendingPayment] = useState(false);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const loadSubscriptionData = async () => {
      try {
        setIsLoading(true);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        // const response = await subscriptionsAPI.getPlans();
        // setPlans(response.data.plans);
        
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        setPlans([
          {
            id: 'monthly',
            name: '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
            price: 1899,
            period: '–º–µ—Å—è—Ü',
            description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü'
          },
          {
            id: 'annual',
            name: '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
            price: 14990,
            period: '–≥–æ–¥',
            description: '–≠–∫–æ–Ω–æ–º–∏—è 40% –æ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'
          }
        ]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if (user) {
          try {
            const statusResponse = await subscriptionsAPI.getSubscriptionInfo();
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –º–æ–∂–µ–º —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            if (statusResponse.data.pendingPayment) {
              setIsPendingPayment(true);
              setPaymentUrl(statusResponse.data.resumePaymentUrl || null);
            }
          } catch (statusError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ:', statusError);
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ:', error);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏');
      } finally {
        setIsLoading(false);
      }
    };
    
    loadSubscriptionData();
  }, [user]);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Telegram
  useEffect(() => {
    if (webApp?.MainButton && !isLoading) {
      if (subscription.isActive) {
        webApp.MainButton.setText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π');
      } else {
        webApp.MainButton.setText('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É');
      }
      
      webApp.MainButton.show();
      webApp.MainButton.onClick(() => {
        if (subscription.isActive) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
          webApp.showPopup({
            title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π',
            message: '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π?',
            buttons: [
              { id: 'cancel', type: 'destructive', text: '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ' },
              { id: 'close', type: 'cancel', text: '–ó–∞–∫—Ä—ã—Ç—å' }
            ]
          }, (buttonId) => {
            if (buttonId === 'cancel') {
              handleCancelSubscription();
            }
          });
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞
          showSubscriptionPlans();
        }
      });
    }
    
    return () => {
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      webApp?.MainButton?.hide();
    };
  }, [webApp, isLoading, subscription]);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  const showSubscriptionPlans = () => {
    if (!webApp?.showPopup) return;
    
    const buttons = plans.map(plan => ({
      id: plan.id,
      type: 'default' as const,
      text: `${plan.name} - ${plan.price} ‚ÇΩ`
    }));
    
    buttons.push({ id: 'cancel', type: 'default' as const, text: '–û—Ç–º–µ–Ω–∞' });
    
    webApp.showPopup({
      title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏',
      buttons
    }, (buttonId) => {
      if (buttonId !== 'cancel') {
        handleSubscribe(buttonId);
      }
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  const handleSubscribe = async (planId: string) => {
    try {
      setIsLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
      const response = await subscriptionsAPI.getPaymentUrl(planId);
      
      if (response.data && response.data.paymentUrl) {
        setPaymentUrl(response.data.paymentUrl);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –≤ Telegram
        if (webApp?.openLink) {
          webApp.openLink(response.data.paymentUrl);
        } else {
          // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
          window.open(response.data.paymentUrl, '_blank');
        }
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      
      if (webApp?.showPopup) {
        webApp.showPopup({
          title: '–û—à–∏–±–∫–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          buttons: [{ id: 'ok', type: 'ok', text: 'OK' }]
        });
      }
    } finally {
      setIsLoading(false);
    }
  };
  
  // –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  const handleCancelSubscription = async () => {
    try {
      setIsLoading(true);
      
      await subscriptionsAPI.cancelAutoRenewal();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
      if (webApp?.showPopup) {
        webApp.showPopup({
          title: '–£—Å–ø–µ—à–Ω–æ',
          message: '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.',
          buttons: [{ id: 'ok', type: 'ok', text: 'OK' }]
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      if (user) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      
      if (webApp?.showPopup) {
        webApp.showPopup({
          title: '–û—à–∏–±–∫–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          buttons: [{ id: 'ok', type: 'ok', text: 'OK' }]
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  const subscriptionFeatures = [
    {
      title: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º 8 –º–æ–¥—É–ª—è–º –∫—É—Ä—Å–∞',
      icon: 'üìö',
      description: '–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ –º–∏–ª–ª–∏–æ–Ω–∞ —Ä—É–±–ª–µ–π'
    },
    {
      title: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Ñ–∏—à–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤',
      icon: 'üìã',
      description: '–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è'
    },
    {
      title: '–î–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π Telegram-–∫–∞–Ω–∞–ª',
      icon: 'üí¨',
      description: '–û–±—â–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏ –∏ –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º'
    },
    {
      title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      icon: 'üîÑ',
      description: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ'
    },
    {
      title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
      icon: 'üë•',
      description: '–ü–æ–º–æ—â—å –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤'
    }
  ];

  const comparisonTable = [
    {
      feature: '–î–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–≤–æ–º—É –º–æ–¥—É–ª—é',
      free: true,
      premium: true
    },
    {
      feature: '–ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã (3 —à—Ç)',
      free: true,
      premium: true
    },
    {
      feature: '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º 8 –º–æ–¥—É–ª—è–º',
      free: false,
      premium: true
    },
    {
      feature: '–ü–æ–ª–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ (20+ —à—Ç)',
      free: false,
      premium: true
    },
    {
      feature: '–ó–∞–∫—Ä—ã—Ç—ã–π Telegram-–∫–∞–Ω–∞–ª',
      free: false,
      premium: true
    },
    {
      feature: '–ö–µ–π—Å—ã —É—Å–ø–µ—à–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤',
      free: false,
      premium: true
    },
    {
      feature: '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
      free: false,
      premium: true
    }
  ];

  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="w-16 h-16 border-4 border-[#6A45E8] border-t-transparent rounded-full animate-spin"></div>
        <p className="mt-4 text-gray-600 dark:text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ...</p>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="text-red-500 text-xl mb-4">‚ö†Ô∏è</div>
        <p className="text-red-500 font-medium mb-2">{error}</p>
        <Button 
          variant="ghost" 
          onClick={() => navigate(-1)}
          leftIcon={<span className="text-lg">‚Üê</span>}
        >
          –ù–∞–∑–∞–¥
        </Button>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-center p-4 space-y-6 pb-36 animate-fade-in">
      <div className="w-full max-w-md">
        <Button 
          variant="ghost" 
          onClick={() => navigate(-1)}
          leftIcon={<span className="text-lg">‚Üê</span>}
          className="mb-4"
        >
          –ù–∞–∑–∞–¥
        </Button>
        
        {/* –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ */}
        {subscription.isActive && (
          <Card variant="primary" className="mb-6 animate-slide-in-right bg-green-500/10 text-green-800">
            <div>
              <h2 className="text-xl font-semibold flex items-center">
                <span className="mr-2">‚úì</span> –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
              </h2>
              <div className="mt-2 space-y-1">
                <p>–ü–µ—Ä–∏–æ–¥: <span className="font-medium">–ü—Ä–µ–º–∏—É–º</span></p>
                <p>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <span className="font-medium">{getFormattedEndDate()}</span></p>
                <p>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <span className="font-medium">{getDaysRemaining()}</span></p>
                <p>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: <span className="font-medium">{subscription.autoRenewal ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}</span></p>
              </div>
              <div className="mt-4">
                <Button
                  variant={subscription.autoRenewal ? "secondary" : "primary"}
                  className="w-full"
                  onClick={() => subscription.autoRenewal ? handleCancelSubscription() : null}
                >
                  {subscription.autoRenewal ? '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ' : '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ'}
                </Button>
              </div>
            </div>
          </Card>
        )}
        
        <h1 className="text-2xl font-bold text-center mb-2 animate-slide-in-right text-[#6A45E8]">
          {subscription.isActive ? '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π' : '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WB Simple'}
        </h1>
        
        <p className="text-center text-gray-600 dark:text-gray-400 mb-6 animate-slide-in-right" style={{ animationDelay: '50ms' }}>
          {subscription.isActive 
            ? '–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã' 
            : '–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –±—É–¥—É—â–µ–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ Wildberries'}
        </p>
        
        {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ */}
        {!subscription.isActive && plans.map((plan, index) => (
          <Card 
            key={plan.id}
            variant="primary" 
            className={`mb-4 animate-slide-in-right ${
              plan.id === 'annual' 
                ? 'bg-gradient-to-r from-[#6A45E8]/10 to-[#8A65FF]/10 border-[#6A45E8]' 
                : 'bg-white'
            }`}
          >
            <div style={{ animationDelay: `${100 * index}ms` }}>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">
                  {plan.name}
                  {plan.id === 'annual' && (
                    <span className="ml-2 text-xs bg-[#6A45E8] text-white px-2 py-1 rounded-full">
                      –í—ã–≥–æ–¥–Ω–æ
                    </span>
                  )}
                </h2>
                <div className="text-right">
                  <span className="text-2xl font-bold text-[#6A45E8]">
                    {plan.price} ‚ÇΩ
                  </span>
                  <div className="text-xs text-gray-500 dark:text-gray-400">
                    –∑–∞ {plan.period}
                  </div>
                </div>
              </div>
              
              <div className="text-sm text-gray-600 mb-4">
                {plan.description}
              </div>
              
              <Button
                variant="primary"
                fullWidth
                className={`${plan.id === 'annual' ? 'bg-gradient-to-r from-[#6A45E8] to-[#8A65FF] border-none' : ''}`}
                onClick={() => handleSubscribe(plan.id)}
              >
                –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
              </Button>
            </div>
          </Card>
        ))}
        
        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–¥–ø–∏—Å–∫–∏ */}
        {!subscription.isActive && (
          <Card 
            variant="primary" 
            className="mb-6 animate-slide-in-right bg-gradient-to-r from-[#6A45E8]/10 to-[#8A65FF]/10" 
          >
            <div style={{ animationDelay: '200ms' }}>
              <h3 className="text-lg font-semibold mb-4 text-[#6A45E8]">–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫—É</h3>
              
              <ul className="space-y-3 mb-4">
                {subscriptionFeatures.map((feature, index) => (
                  <li key={index} className="flex items-start animate-slide-in-right" style={{ animationDelay: `${300 + index * 100}ms` }}>
                    <div className="bg-[#6A45E8]/10 text-[#6A45E8] rounded-full w-8 h-8 flex items-center justify-center mr-3 mt-0.5">
                      <span>{feature.icon}</span>
                    </div>
                    <div>
                      <div className="font-medium">{feature.title}</div>
                      <div className="text-sm text-gray-600 dark:text-gray-400">{feature.description}</div>
                    </div>
                  </li>
                ))}
              </ul>
              
              <p className="text-sm text-gray-600 dark:text-gray-400 border-t border-gray-200 dark:border-gray-700 pt-4 mt-4">
                –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
              </p>
            </div>
          </Card>
        )}
        
        {/* –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ */}
        {!subscription.isActive && (
          <Card 
            variant="default" 
            className="mb-6 animate-slide-in-right" 
          >
            <div style={{ animationDelay: '300ms' }}>
              <h3 className="text-lg font-semibold mb-4 text-[#6A45E8]">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</h3>
              
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-gray-200 dark:border-gray-700">
                      <th className="text-left py-2">–§—É–Ω–∫—Ü–∏—è</th>
                      <th className="text-center py-2">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</th>
                      <th className="text-center py-2 text-[#6A45E8]">–ü—Ä–µ–º–∏—É–º</th>
                    </tr>
                  </thead>
                  <tbody>
                    {comparisonTable.map((item, index) => (
                      <tr key={index} className="border-b border-gray-200 dark:border-gray-700 last:border-0">
                        <td className="py-3 text-sm">{item.feature}</td>
                        <td className="py-3 text-center">
                          {item.free ? 
                            <span className="text-green-500">‚úì</span> : 
                            <span className="text-red-500">‚úó</span>}
                        </td>
                        <td className="py-3 text-center">
                          {item.premium ? 
                            <span className="text-[#6A45E8]">‚úì</span> : 
                            <span className="text-red-500">‚úó</span>}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </Card>
        )}
        
        {/* –ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ */}
        <div style={{ animationDelay: '500ms' }}>
          <Card 
            variant="default" 
            className="animate-slide-in-right" 
          >
            <div>
              <h3 className="text-lg font-semibold mb-2 text-[#6A45E8]">–ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –Ω–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤</h3>
              <div className="space-y-3">
                <div className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <p className="text-sm italic mb-2">
                    "–ë–ª–∞–≥–æ–¥–∞—Ä—è –∫—É—Ä—Å—É —è –≤—ã—à–µ–ª –Ω–∞ –¥–æ—Ö–æ–¥ 350 000 ‚ÇΩ –≤ –º–µ—Å—è—Ü –≤—Å–µ–≥–æ –∑–∞ 3 –º–µ—Å—è—Ü–∞ —Ä–∞–±–æ—Ç—ã —Å Wildberries"
                  </p>
                  <div className="text-xs text-gray-600 dark:text-gray-400">
                    ‚Äî –ê–ª–µ–∫—Å–µ–π, –ø—Ä–æ–¥–∞–≤–µ—Ü —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞
                  </div>
                </div>
                <div className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <p className="text-sm italic mb-2">
                    "–ö—É—Ä—Å –ø–æ–º–æ–≥ –º–Ω–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–∞—Ö —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º. –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"
                  </p>
                  <div className="text-xs text-gray-600 dark:text-gray-400">
                    ‚Äî –ú–∞—Ä–∏—è, –ø—Ä–æ–¥–∞–≤–µ—Ü –∫–æ—Å–º–µ—Ç–∏–∫–∏
                  </div>
                </div>
              </div>
              {!subscription.isActive && (
                <div className="mt-4 text-center">
                  <Button 
                    variant="primary"
                    size="lg"
                    fullWidth
                    className="bg-gradient-to-r from-[#6A45E8] to-[#8A65FF] border-none"
                    onClick={() => showSubscriptionPlans()}
                  >
                    –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                  </Button>
                </div>
              )}
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default SubscriptionPage; 