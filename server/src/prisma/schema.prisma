generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель пользователя
model User {
  id         String     @id @default(uuid())
  telegramId String     @unique
  username   String
  firstName  String
  lastName   String
  photoUrl   String?
  role       UserRole   @default(USER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  progress   Progress?
  payments   Payment[]
  feedbacks  Feedback[]
}

// Роль пользователя
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

// Прогресс пользователя
model Progress {
  id               String   @id @default(uuid())
  completedModules String[] @default([])
  lastActivity     DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @unique
}

// Модель платежа
model Payment {
  id        String        @id @default(uuid())
  amount    Decimal
  currency  String
  status    PaymentStatus
  provider  String
  reference String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  userId    String
}

// Статус платежа
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Модель обратной связи
model Feedback {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  lessonId  String?
  moduleId  String?
}

// Модель образовательного модуля
model Module {
  id          String     @id @default(uuid())
  title       String
  description String
  order       Int
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lessons     Lesson[]
  isPublished Boolean    @default(false)
}

// Модель урока
model Lesson {
  id          String      @id @default(uuid())
  title       String
  description String
  content     String
  videoUrl    String?
  duration    Int?
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  module      Module      @relation(fields: [moduleId], references: [id])
  moduleId    String
  type        LessonType  @default(VIDEO)
  isPublished Boolean     @default(false)
}

// Тип урока
enum LessonType {
  VIDEO
  TEXT
  QUIZ
  PRACTICE
} 