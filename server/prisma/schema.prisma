// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  PRACTICE
}

model User {
  id                 String   @id @default(uuid())
  telegramId         String   @unique
  username           String
  firstName          String
  lastName           String
  photoUrl           String?
  role               UserRole @default(USER)
  hasActiveSubscription Boolean @default(false)
  subscriptionEndDate  DateTime?
  autoRenewal          Boolean @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Связи с другими моделями
  progress           Progress?
  payments           Payment[]
  feedbacks          Feedback[]
}

model Progress {
  id               String    @id @default(uuid())
  completedModules String[]  @default([])
  completedLessons String[]  @default([])
  lastActivity     DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Связь с пользователем
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String         @id @default(uuid())
  amount    Decimal
  currency  String
  status    PaymentStatus
  provider  String
  reference String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  // Связь с пользователем
  userId    String
  user      User           @relation(fields: [userId], references: [id])
}

model Feedback {
  id        String    @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Связи с другими моделями
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  lessonId  String?
  moduleId  String?
}

model Module {
  id          String    @id @default(uuid())
  title       String
  description String
  order       Int
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPublished Boolean   @default(false)
  
  // Связи с другими моделями
  lessons     Lesson[]
}

model Lesson {
  id          String     @id @default(uuid())
  title       String
  description String
  content     String
  videoUrl    String?
  duration    Int?       // в секундах
  order       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Связь с модулем
  moduleId    String
  module      Module     @relation(fields: [moduleId], references: [id])
  
  // Тип урока
  type        LessonType @default(VIDEO)
  
  // Статус публикации
  isPublished Boolean    @default(false)
}

// Модель для хранения недействительных JWT-токенов
model BlacklistedToken {
  token      String   @id
  expiresAt  DateTime
  createdAt  DateTime @default(now())
} 